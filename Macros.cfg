#####################################################################
# 	Macros
#####################################################################

[homing_override]
gcode:

  {% set z_home_x= 175.0 %}
  {% set z_home_y= 175 %}
  {% set z_hop= 10 %}
  {% set homing_speed = printer.configfile.settings.stepper_x.homing_speed %}
  {% set z_homing_speed= printer.configfile.settings.stepper_z.homing_speed %}
  {% set homed_axes = printer.toolhead.homed_axes %}
    
  G90 ;absolute positioning
  
  {% if not 'Z' in params and 'Y' in params and 'X' in params %} ;G28 XY
    _Z_HOP
    _HOMEYX
  {% endif %}
  
  {% if not 'Z' in params and not 'Y' in params and 'X' in params %} ;G28 X
    _Z_HOP
    _HOMEYX
  {% endif %}
  
  {% if not 'Z' in params and 'Y' in params and not 'X' in params %} ;G28 Y
    _Z_HOP
    ## Home Y
    G28 Y0
  {% endif %}
  
  {% if 'Z' in params and not 'Y' in params and not 'X' in params %} ;G28 Z
    {% set out = [] %}
    {% set dummy = out.append("%s" % homed_axes) %}
    {action_respond_info(out|join("\n"))}
    _Z_HOP
    {%if "x" not in homed_axes %}
      _HOMEYX
    {% elif "y" not in homed_axes %}
      G28 Y0
    {% endif %}
    G1 X{z_home_x} Y{z_home_y} F{homing_speed*60}
    G28 Z0
    G1 Z{z_hop}
  {% endif %}
  
  {% if not 'Z' in params and not 'Y' in params and not 'X' in params %} ;G28
    _Z_HOP
    _HOMEYX
    G1 X{z_home_x} Y{z_home_y} F{homing_speed*60}
    G28 Z0
    G1 Z{z_hop}
      
  {% endif %}
set_position_z:0
[gcode_macro _Z_HOP]
gcode:
  {% set z_homing_speed= printer.configfile.settings.stepper_z.homing_speed %}
  {% set z_hop = params.Z_HOP|default(10.0)|float %}
  G1 Z{z_hop} F{z_homing_speed *60}
  
[gcode_macro _HOMEYX]
gcode:
  ## Home Y
  G28 Y0
  ## Home X
  G28 X0

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z} F6000
    G90
    G1 X{X} Y{Y} F3000
    G91
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro LOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E100 F300 # fast-load
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    # G1 E25 F1000 # purge
    # G1 E-101 F1500 # fast-unload
    G1 E15 F1000
    G1 E-15 F1500
    G4 5000
    G1 E7 F500
    G1 E10 F1000
    G4 3000
    G1 E100 F1000
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro G32]
gcode:
    CLEAN_NOZZLE
    BED_MESH_CLEAR
    STATUS_HOMING
    G28
    STATUS_LEVELING
    QUAD_GANTRY_LEVEL
    STATUS_HOMING
    G28
    STATUS_READY    
    G0 X175 Y175 Z30 F3600
    #--------------------------------------------------------------------
[gcode_macro OFF]
gcode:
  STATUS_OFF

  
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:

    {% set BED = params.BED|default(0)|int %}
    {% set EXTRUDER = params.EXTRUDER|default(0)|int %}
    {% set CGAMBER = params.CHAMBER|default(0)|int %}  
    # SET_HEATER_TEMPERATURE HEATER=CHAMBER TARGET=chamber_temp

    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED}
    #SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150 
    G32
    {% if BED<50 %}
      BED_MESH_PROFILE LOAD=default
    {% endif %}
    {% if BED>=50 and BED<=80 %}
      BED_MESH_PROFILE LOAD=warm
    {% endif %}
    {% if BED>80 %}
      BED_MESH_PROFILE LOAD=hot
    {% endif %}
    STATUS_HEATING
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED - 10}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER}

    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER - 0.2} MAXIMUM={EXTRUDER + 0.2}

    CLEAN_NOZZLE
    STATUS_PRINTING

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F1500                ; retract filament

    G91                            ; relative positioning
    G0 Z1.00 X-20.0 Y-20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    CLEAN_NOZZLE
    STATUS_BUSY
    TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=218
    CLEAN_NOZZLE
    STATUS_BUSY
    TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=200
    CLEAN_NOZZLE
    STATUS_BUSY
    TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=180
    CLEAN_NOZZLE
    
    G0  X175 Y340 F3600            ; park nozzle at rear
    BED_MESH_CLEAR
    
    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    STATUS_READY
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0


[gcode_macro GO_CENTER]
gcode:
  G1 X175 Y175 F6000

[gcode_macro PURGE]
variable_start_x: 40
variable_start_y: -4
variable_start_z: 8
variable_purge_amount: 7
variable_retract_amount: 1
gcode:
  SAVE_GCODE_STATE NAME=purge
  {% set extruder = printer.extruder.temperature %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set max_x = printer.toolhead.axis_maximum.x %}
  {% set max_y = printer.toolhead.axis_maximum.y %}
  {% if extruder > 218 %}
    M106 S255
    G90 
    G92 E0
    {% if act_z < start_z %}
      G1 Z{start_z} F6000
    {% endif %}
    G1 X{start_x} Y{start_y} F6000
    G1 Z{start_z} F6000
    M83
    G1 E{purge_amount} F600
    # G1 E-{retract_amount} F1200
    M106 S0
  {% endif %}
  RESTORE_GCODE_STATE NAME=purge
  

[gcode_macro CLEAN_NOZZLE]
variable_start_x: 47
variable_start_y: -2
variable_start_z: 3
variable_wipe_dist: 54
variable_wipe_qty: 10
variable_wipe_spd: 500
variable_move_spd: 300
variable_raise_distance: 20

gcode:
  STATUS_CLEANING
  SAVE_GCODE_STATE NAME=clean_nozzle_state
  SET_VELOCITY_LIMIT VELOCITY=500 ACCEL=5000
  {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
  {% endif %}
  
  {% set act_x = printer.toolhead.position.x|float %}
  {% set act_y = printer.toolhead.position.y|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set max_x = printer.toolhead.axis_maximum.x %}
  {% set max_y = printer.toolhead.axis_maximum.y %}
  {% set extruder = printer.extruder.temperature %}
  
  G90                                            ; absolute positioning
  ## Move nozzle to start position
  
  G1 X{start_x} Y{start_y} F{move_spd * 60}
  G1 Z{start_z} F1500
  
  ## Wipe nozzle
  
  # {% for wipes in range(1, (wipe_qty + 1)) %}
  #   G1 X{start_x + wipe_dist} Y{start_y} F{wipe_spd * 60}
  #   G1 X{start_x} Y{start_y} F{wipe_spd * 60}
  # {% endfor %}

  

  {% for wipe in range(0, (wipe_qty)) %}
    G1 X{start_x + wipe_dist} Y{start_y - wipe * 0.5} F{wipe_spd * 60}
    G1 X{start_x} Y{start_y - wipe * 0.5} F{wipe_spd * 60}
  {% endfor %}

  # PURGE
  # G1 Z{start_z} F1500
  # G1 X{start_x + wipe_dist} Y{start_y - 5} F{wipe_spd * 60}
  
  ## Raise nozzle to previous level
  {% if act_z > start_z %}
    G1 Z{act_z} F1500
  {% else %}
    G1 Z30 F1500
  {% endif %}
  # Move head to previous position
  {% if act_x > 50 and act_y > 50 %}
    G1 X{[act_x,max_x]|min} Y{[act_y,max_y]|min} F{move_spd * 60}
  {% else %}
    G1 Y50 F{move_spd * 60}
  {% endif %}
  STATUS_READY
  RESTORE_GCODE_STATE NAME=clean_nozzle_state
 
# [homing_override]
# gcode:
#   {% if 'X' in params %}
    
  
#     {% if not 'X' in params
#         and not 'Y' in params
#         and not 'Z' in params %}

#         {% set home_x, home_y, home_z = True, True, True %}
#     {% else %}
#         {% if 'X' in params %}
#             {% set home_x = True %}
#         {% endif %}
#         {% if 'Y' in params %}
#             {% set home_y = True %}
#         {% endif %}
#         {% if 'Z' in params %}
#             {% set home_z = True %}
#         {% endif %}
#     {% endif %}

#     {% if home_x %}
#         {% if verbose %}
#             { action_respond_info("Homing X") }
#         {% endif %}
#         SENSORLESS_HOME_X
#     {% endif %}
# 	G4 P500
#     {% if home_y %}
#         {% if verbose %}
#             { action_respond_info("Homing Y") }
#         {% endif %}
#         SENSORLESS_HOME_Y
#     {% endif %}
#     {% if home_z %}
#         {% if verbose %}
#             { action_respond_info("Homing Z") }
#         {% endif %}
#         G28 Z0
#         G1 Z10
#     {% endif %}
# axes: xyz

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

